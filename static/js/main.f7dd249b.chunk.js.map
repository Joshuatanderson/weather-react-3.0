{"version":3,"sources":["Header.js","Input.js","WeatherBlock.js","CurrentWeatherBlock.js","WeatherBlocks.js","PlaceNames.js","App.js","index.js"],"names":["Header","react_default","a","createElement","className","Input","props","type","placeholder","onChange","handleChange","WeatherBlock","_ref","day","dayOfWeek","getIcon","mintemp_f","maxtemp_f","avghumidity","condition","icon","CurrentWeatherBlock","description","windSpeed","humidity","temp","WeatherBlocks","current","forecast","getDay","src_CurrentWeatherBlock","gust_mph","text","temp_f","src_WeatherBlock","key","id","PlaceNames","city","country","App","state","Array","fill","cloud","data","undefined","currentDay","getData","e","fetch","concat","target","value","then","readableStream","ok","Error","json","_this","setState","location","name","forecastday","catch","err","console","log","getCurrentDay","Date","getDayOfWeek","index","days","tomorrowIndex","tomorrow","daysAfter","slice","daysBefore","src","alt","this","src_Header","src_Input","src_PlaceNames","src_WeatherBlocks","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.f7dd249b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n    return(\n        <header className = \"is-dark hero\">\n            <div className = \"hero-body has-text-centered\">\n                <p className = \"title\">\n                    Weather 2.0\n                </p>\n            </div>\n        </header>\n    );\n}\n\nexport default Header;","import React from 'react';\n\nconst Input = (props) => {\n    return(\n       <div className = \"section\">\n            <div className = \"container\">\n                <div className=\"field\">\n                    <div className=\"control\">\n                        <input \n                            className=\"input is-info\" \n                            type=\"text\" \n                            placeholder=\"city or zipcode\"\n                            onChange = {props.handleChange}\n                            >\n                        </input>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Input;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst WeatherBlock = ({day, dayOfWeek, getIcon}) => {\n    return(\n        <div className = \"tile is-child box\">\n            <p className = \"subtitle\">{dayOfWeek}</p>\n            <p>Low: {day.mintemp_f}</p>\n            <p>High: {day.maxtemp_f}</p>\n            <p>Humidity: {day.avghumidity}</p>\n            {getIcon(day.condition.icon)}\n        </div>\n    );\n}\n\nWeatherBlock.propTypes = {\n    day: PropTypes.object.isRequired,\n    getIcon: PropTypes.func.isRequired\n}\n\nexport default WeatherBlock;","import React from 'react';\nimport PropTypes from 'prop-types';\n\n//receives relevant data for a single day as props\n\nconst CurrentWeatherBlock = ({description, windSpeed, humidity, day, icon, getIcon, temp}) => {\n\n    \n\n    return(\n        < div className = \"tile is-child box has-background-info\" >\n            <p className = \"title has-text-white\">Today</p>\n            <p className = \"subtitle has-text-white\">Conditions: {description}</p>\n            <p className = \"subtitle has-text-white\">Temperature: {temp}</p>\n            <p className = \"subtitle has-text-white\">Windspeed: {windSpeed}</p>\n            <p className = \"subtitle has-text-white\">Humidity: {humidity}</p>\n            {getIcon(icon)}     \n        </div>\n    );\n}\n\nCurrentWeatherBlock.propTypes = {\n    description: PropTypes.string.isRequired,\n}\n\nexport default CurrentWeatherBlock;","import React from 'react';\nimport WeatherBlock from './WeatherBlock';\nimport CurrentWeatherBlock from './CurrentWeatherBlock'\nimport PropTypes from 'prop-types';\n\n//receives relevant data\n//passes relevant data for each day into the respective weather block\n//passes a day value into each weather block\n\nconst WeatherBlocks = ({current, forecast, getDay, getIcon}) => {\n    return(\n        <div className = \"section\">\n            <div className = \"container\">\n                <div className = \"tile is-ancestor\">\n                    <div className = \"tile is-parent is-vertical\">\n                        <CurrentWeatherBlock \n                           humidity = {current.humidity}\n                           windSpeed = {current.gust_mph}\n                           description = {current.condition.text}\n                           icon = {current.condition.icon}\n                           getIcon = {getIcon}\n                           temp = {current.temp_f}\n                        />\n                    </div>\n                    <div className = \"tile is-parent is-vertical\">\n                        <WeatherBlock \n                            key = {1}\n                            id = {1}\n                            day = {forecast[1].day}\n                            dayOfWeek = {getDay(1)}\n                            getIcon = {getIcon}\n                        />\n                        <WeatherBlock \n                            key = {2}\n                            id = {2}\n                            day = {forecast[2].day}\n                            dayOfWeek = {getDay(2)}\n                            getIcon = {getIcon}\n                        />\n                        <WeatherBlock \n                            key = {3}\n                            id = {3}\n                            day = {forecast[3].day}\n                            dayOfWeek = {getDay(3)}\n                            getIcon = {getIcon}\n\n                        />\n                    </div>\n                    <div className = \"tile is-parent is-vertical\">\n                        <WeatherBlock \n                            key = {4}\n                            id = {4}\n                            day = {forecast[4].day}\n                            dayOfWeek = {getDay(4)}\n                            getIcon = {getIcon}\n\n                        />\n                        <WeatherBlock \n                            key = {5}\n                            id = {5}\n                            day = {forecast[5].day}\n                            dayOfWeek = {getDay(5)}\n                            getIcon = {getIcon}\n\n                        />\n                        <WeatherBlock \n                            key = {6}\n                            id = {6}\n                            day = {forecast[6].day}\n                            dayOfWeek = {getDay(6)}\n                            getIcon = {getIcon}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nWeatherBlocks.propTypes = {\n    current: PropTypes.object,\n    forecast: PropTypes.array,\n    getIcon: PropTypes.func.isRequired\n}\n\nexport default WeatherBlocks;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PlaceNames = ({city, country}) => {\n    return(\n        <div className = \"container\">\n            <p className = \"title\" >{city}</p>\n            <p className = \"subtitle\" >{country}</p>\n        </div>\n    );\n}\n\nPlaceNames.propTypes = {\n    city: PropTypes.string.isRequired,\n    country: PropTypes.string.isRequired\n}\n\nexport default PlaceNames;","import React, { Component } from 'react';\n\nimport Header from './Header';\nimport Input from './Input';\nimport WeatherBlocks from './WeatherBlocks';\n\nimport './style.css';\nimport 'bulma/css/bulma.css'\nimport PlaceNames from './PlaceNames';\n\nclass App extends Component {\n    //initializing state\n  state = {\n    city: 'oh the places',\n    country: 'you\\'ll go',\n    forecast: Array(7).fill({\n      day: {\n        avghumidity: '',\n        maxtemp_f: '',\n        mintemp_f: '',\n        condition: {\n          icon: ''\n        }\n      }\n    }),\n    current: {\n      cloud: '',\n      gust_mph: '',\n      humidity: '',\n      temp_f: '',\n      condition: {\n        text: '',\n        icon: ''\n      }\n    },\n    data: undefined,\n    currentDay: undefined\n  }\n\n  componentWillMount() {\n    this.getCurrentDay();\n  }\n\n  getData = (e) => {\n      //api key\n    let key = '2fe2d49a1b7849138f2153622192803';\n      //fetches data\n    fetch(`https:api.apixu.com/v1/forecast.json?key=${key}&q=${e.target.value}&days=7`)\n        //throws error if invalid\n      .then((readableStream) => {\n        if (readableStream.ok) {\n          return readableStream;\n        } else{\n          throw Error('location not found');\n        }\n      })\n      .then((readableStream) => {\n        return (readableStream);\n      })\n        //turns data to json\n      .then((data) => {\n        return data.json()\n      })\n        //sets state\n      .then((json) => {\n        if(json !== undefined){\n          this.setState({\n            city: json.location.name,\n            country: json.location.country,\n            forecast: json.forecast.forecastday,\n            current: json.current,\n            data: json\n          })\n        } else return;\n      })\n      .catch(err => console.log(err))\n      this.getCurrentDay();\n  }\n\n  getCurrentDay = () => {\n    let date = new Date();\n    let day = date.getDay();\n    this.setState({\n      currentDay: day\n    })\n  }\n\n  getDayOfWeek = (index) => {\n      //create array of days\n    let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n      //get tomorrow index\n    let tomorrowIndex = this.state.currentDay + 1;\n      //get tomorrow\n    let tomorrow = days[tomorrowIndex];\n      //get days after tomorrow\n    let daysAfter = days.slice(tomorrowIndex);\n    let daysBefore = days.slice(0, tomorrowIndex);\n    let reOrderedDays = [tomorrow].concat(daysAfter, daysBefore)\n      //get days before this.state.currentDay\n      //concat currentDay, after, and then Before\n    let day = reOrderedDays[index];\n    console.log(day);\n    return day;\n  }\n  \n    //utility function to display icon only if it is available\n  getIcon = (icon) => {\n    if(icon){\n      return (\n          <img className = \"image is-96x96\" src = {icon} alt = \"weather icon\"></img>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <div>\n          <Input \n            handleChange = {this.getData}\n          />\n\n          <PlaceNames \n            city = {this.state.city}\n            country = {this.state.country}\n          />\n\n          <WeatherBlocks \n            forecast = {this.state.forecast}\n            current = {this.state.current}\n            getDay = {this.getDayOfWeek}\n            getIcon = {this.getIcon}\n          />\n          \n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}